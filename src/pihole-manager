#!/bin/env bash

# Copyright (c) 2021 Michael L. Schaecher

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function __root_check () {
	# Some commands require root access in order to function propertly. Only
	# those that require well check for permissions.
	if test "$(id -u)" -gt "0" ; then
		echo "root premission required!" && exit 1
	fi
}

function __health_check () {
	# Check if Pihole is up and running: If not enable, however exit with error.
	# If Pihole is running normally do nothing.
	if test "$(pihole status | grep 'Pihole blocking is disabled')" ||
	   test "$(pihole status | grep 'DNS service is NOT running')"; then
		echo "(${program_name} Error) not enabled - $(date -R)" >> ${log_out}
		pihole enable & sleep 5s && exit 1
	fi
}

function __pihole_gravity () {
	# Update the gravity and sleep at the sametime for 10s.
	if pihole updateGravity > /dev/null & sleep 10s ; then
		echo "(${program_name}) Updated Gravity - $(date -R)" >> ${log_out}
	else
		echo "(${program_name}) Error: Update Gravity - $(date -R)" >> ${log_out}
		exit 1
	fi
}

function __pihole_firmware () {

	# Get both the current and last versions.
	while read -r __line ; do
		__current="${__current} $(echo "$__line" | awk '{print $4}' | tr -d 'v:)')"
		__latest="${__latest} $(echo "$__line" | awk '{print $6}' | tr -d 'v:)')"
	done < <(pihole version)

	echo $__current $__latest

	# If any part of pihole is out dated then update as a hole.
	if test "${__current}" != "${__latest}" ; then

		# Update and sleep for 90 seconds at the sametime.
		if pihole updatePihole > /dev/null & sleep 90s ; then
			echo "(${program_name}) Updated - $(date -R)" >> ${log_out}
			reboot
		else
			echo "(${program_name}) Error: Firmware Update - $(date -R)" >> ${log_out}
			exit 1
		fi

	# If Pihole is up-to-date, then simply log that it is.
	elif test "${__current}" = "${__latest}" ; then
		echo "(${program_name}) Update to date - $(date -R)" >> ${log_out}
	fi

}

set -e

program_name="pihole-manager"

log_out="/var/log/pihole-manager.log"		# Log every this script does.

# Basic info
about=$(cat <<EOF
${program_name} - version (${version})
EOF
)

# The help and basic info.
usage=$(cat <<EOF
${about}

usage: ${program_name} command
usage: ${program_name} command <option>

commands

	update <option>		Update Pihole or just the Gravity.

	clear			Clear Pihole logs.

	log			View log file generator by pihole-manager.

	help			Shows the messages.

	version			Displays version info.

options
	--gravity		Update Pihole gravity only.

	--firmware		Update Pihole firmware.

	--all			Update firmware and gravity.

pihole-server-updater homepage: <https://www.github.com/mschaecher78/pihole-manager/>
Copyright (C) 2021 <Michael L. Schaecher> MIT License
EOF
)

test ! -f ${log_out} && touch ${log_out}			# Create log file if it does not exit.

while true ; do case "${1}" in
	flush		)
		__root_check ; __health_check ; shift 1

		# If any one of the commands fail then error and exit dirty.
		if pihole flush && pihole arpflush  ; then
			echo "(Pihole) logs flushed             - $(date -R)" >> ${log_out}
			break
		else
			echo "(Pihole) Error: log flushed       - $(date -R)" >> ${log_out}
			exit 1
		fi

	;;
	log		)
		cat "${log_out}" | less && break		# # Display log file using less command.
	;;
	help		)
		echo "${usage}" && break			# Helpful tips
	;;
	update		)
		__root_check ; __health_check ; shift 1
	;;
	version		)
		echo "${about}" && break			# Display name and version info.
	;;
	--gravity	)
		__pihole_gravity ; break			# Run function _pihole_gravity.
	;;
	--firmware	)
		__pihole_firmware ; break			# Run function _pihole_firmware.
	;;
	--flush		)
	;;
	--all		)
		# Run all functions relating to keeping Pihole update-to-date. This is the only
		# option that is run manually and not by SystemD.
		__pihole_gravity ; __pihole_firmware ; break
	;;
	*		)
		echo "${program_name} invalid command or option!" && exit 1	# Exit if ivalid command/option
	;;
esac done

exit 0
