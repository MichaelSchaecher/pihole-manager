#!/bin/bash

# pihole-manager helps to manage Pi-hole by keeping it update to date.
# Copyright (C) 2021  Michael L. Schaecher

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

name="pihole-manager"

piholeVersion="/etc/pihole/piholeVersions"	# Store with the rest of the Pi-hole stuff.
logFile="/var/log/pihole-manager.log"		# Log every this script does.

# The following is pulled from Lorenzo Faleschini off of his post "A plugin for Pihole."
# His idea works better and that it works more as a way to monitor for possible updates
# By applying his idea to a systemd timer the script becomes more effective.
pihole version > ${piholeVersion}

# Get both the current and last versions.
piholeCurrent="$(cat ${piholeVersion} | awk 'NR==1 {print}' | cut -d ' ' -f 6 | tr -d 'v:(:)')"
piholeLatest="$(cat ${piholeVersion} | awk 'NR==1 {print}' | cut -d ' ' -f 8 | tr -d 'v:(:)')"

adminLTECurrent="$(cat ${piholeVersion} | awk 'NR==2 {print}' | cut -d ' ' -f 6 | tr -d 'v:(:)')"
adminLTELatest="$(cat ${piholeVersion} | awk 'NR==2 {print}' | cut -d ' ' -f 8 | tr -d 'v:(:)')"

ftlCurrent="$(cat ${piholeVersion} | awk 'NR==3 {print}' | cut -d ' ' -f 6 | tr -d 'v:(:)')"
ftlLatest="$(cat ${piholeVersion} | awk 'NR==3 {print}' | cut -d ' ' -f 8 | tr -d 'v:(:)')"

# Basic info
info=$(cat <<EOF
${Name} - version (${Version})
EOF
)

# The help and basic info.
help=$(cat <<EOF
${Info}

usage: ${Name} command

commands

	log		View log file generator by pihole-manager.

	help		Shows the messages.

	version		Displays version info.

pihole-server-updater homepage: <https://www.github.com/mschaecher78/pihole-server-updater/>
Copyright (C) 2021 <Michael L. Schaecher> GPL v3
EOF
)

# Test if root and if not exit with error.
if test "${EUID}" -gt "0" ; then

	if test ! "${1}" ; then
		echo "${name} ${version} requires root access!"
		exit 1
	else

		case "${1}" in
			--log|-l)
				cat "${logFile}" | less
			;;
			--help|-h)
				echo "${help}"
			;;
			--version|-v)
				echo "${info}"
			;;
		esac

	fi

elif test "${EUID}" -eq "0" ; then

	# Pi-hole needs to be active and running for this scripts to work, so
	# check. And if for some reason Pi-hole is not the try and restart.
	if test "$(pihole status | grep 'Pihole blocking is disabled')" ; then
		echo "(${name} Error) not enabled - $(date -R)" >> ${logFile}
		pihole enable & sleep 5s
		exit 1
	else

		if test "$(pihole status | grep 'DNS service is NOT running')" ; then
			echo "(${name} Error) not enabled - $(date -R)" >> ${logFile}
			pihole enable & sleep 5s
			exit 1
		else

			# Pi-hole if installed with the web interface is divided into three parts
			if test "${piholeCurrent}" != "${piholeLatest}" ||
			test "${adminLTECurrent}" != "${adminLTELatest}" ||
			test "${ftlCurrent}" != "${ftlLatest}" ; then
				echo "(${name}) Updated - $(date -R)" >> ${logFile}
				pihole updatePihole > /dev/null & sleep 90s && reboot
			else
				# If there is nothing to updated, then update the Gravity.
				pihole updateGravity > /dev/null & sleep 10s
				echo "(${name}) Gravity Updated - $(date -R)" >> ${logFile}
			fi

		fi

	fi

fi

exit 0
