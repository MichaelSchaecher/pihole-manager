#!/bin/env bash

function install () {
	# Because of what is installed, user with root premissions is required.
	if test "$(id -u)" -gt "0" ; then
		echo "Must have root premission to setup pihole-manager"
		exit
	else
		# Check if pihole is installed and if not give link to how-to-guide.
		if ! which pihole &> /dev/null ; then
			echo "Please install pihole"
			echo "Visit https://docs.pi-hole.net/main/basic-install/ to learn how."
			exit 126
		fi
	fi

	sed "83i__version=\"${__version}\"" src/$program_name > /usr/local/bin/$program_name

	cp -vpf data/man/$program_name.1.gz /usr/share/man/man1/
	cp -vpf src/lib/* /lib/systemd/system/

	# Enable timers.
	if which systemctl &> /dev/null ; then
		# Disable old pihole-manager systemctl scripts.
		if systemctl is-enabled pihole-manager pihole-flush ; then
			systemctl disable --now pihole-manager.timer pihole-flush.timer
		fi

		systemctl enable --now pihole-update-gravity.timer pihole-log-flush.timer \
			pihole-update-firmware.timer || true && systemctl daemon-reload
	fi
}

function uninstall () {

	__broken_gravity="/etc/systemd/system/timers.target.wants/pihole-update-gravity.timer"
	__broken_firmware="/etc/systemd/system/timers.target.wants/pihole-update-firmware.timer"
	__broken_flush="/etc/systemd/system/timers.target.wants/pihole-log-flush.timer"

	! test "${EUID}" -eq "0" && echo "root premission required!" && exit 1

	systemctl disable --now pihole-update-gravity.timer pihole-log-flush.timer \
		pihole-update-firmware.timer || exit 1

	# For some reason broken symbolic links have been known to exist even after a service is completely
	# disabled. This causes systemctl to still think that the service is still there.
	test -f ${__broken_firmware} || test -f ${__broken_gravity} || test -f ${__broken_flush} &&
		rm ${__broken_firmware} ${__broken_gravity} ${__broken_flush} || exit 1

	rm -vf /usr/local/bin/$program_name
	rm -vf /lib/systemd/system/pihole-update* /lib/systemd/system/pihole-log*
}

program_name="pihole-manager"						# Set program name
__version="$(cat version)"					# Set pointless version code.

# Run function.
"$@"